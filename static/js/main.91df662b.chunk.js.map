{"version":3,"sources":["logo.svg","MovieProject/PrintMovie.js","MovieProject/SearchMovie.js","MovieProject/MovieProject.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","PrintMovie","movie","className","src","poster_path","alt","original_title","overview","release_date","vote_average","SearchMovies","props","useState","input","setInput","movies","setMovies","searchMovies","e","a","preventDefault","url","fetch","res","json","data","console","log","results","error","onSubmit","htmlFor","name","value","onChange","target","type","placeholder","map","key","id","MovieProject","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"kKAAAA,EAAOC,QAAU,IAA0B,kC,qKCC5B,SAASC,EAAT,GAA8B,IAATC,EAAQ,EAARA,MAChC,OACI,yBAAKC,UAAW,QACZ,yBAAKA,UAAW,UAAWC,IAAG,0DAAqDF,EAAMG,aAAeC,IAAI,KAC5G,4BAAKJ,EAAMK,gBACX,+BAAQL,EAAMM,UACd,4CAAkBN,EAAMO,cACxB,oCAAUP,EAAMQ,eCJb,SAASC,EAAaC,GAAO,IAAD,EACdC,mBAAS,IADK,mBAChCC,EADgC,KAC1BC,EAD0B,OAEXF,mBAAS,IAFE,mBAEhCG,EAFgC,KAExBC,EAFwB,KAIhCC,EAAY,uCAAG,WAAMC,GAAN,mBAAAC,EAAA,6DAClBD,EAAEE,iBACIC,EAFY,kHAEqGR,EAFrG,iDAKIS,MAAMD,GALV,cAKRE,EALQ,gBAMKA,EAAIC,OANT,OAMRC,EANQ,OAOdC,QAAQC,IAAIF,EAAKG,SACjBZ,EAAUS,EAAKG,SARD,kDAUdF,QAAQG,MAAR,MAVc,0DAAH,sDAcnB,OACI,oCACI,0BAAM3B,UAAU,OAAO4B,SAAUb,GAC7B,2BAAOf,UAAU,QAAQ6B,QAAQ,SAAjC,eACA,2BAAO7B,UAAU,QAAS8B,KAAK,QAAQC,MAAOpB,EAAOqB,SAAU,SAAChB,GAAD,OAAKJ,EAASI,EAAEiB,OAAOF,QAC/EG,KAAK,OAAOC,YAAY,gBAC/B,4BAAQnC,UAAU,SAASkC,KAAK,UAAhC,kBAEJ,yBAAKlC,UAAU,aACVa,EAAOuB,KAAI,SAAArC,GAAK,OACb,kBAACD,EAAD,CAAYC,MAASA,EAAOsC,IAAKtC,EAAMuC,UC5B5C,SAASC,EAAa9B,GACjC,OACI,yBAAKT,UAAW,aACZ,wBAAIA,UAAW,SAAf,iBACA,kBAACQ,EAAD,OCQGgC,MAXf,WACE,OACE,6BACE,gCACE,kBAACD,EAAD,SCGYE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA9B,GACLH,QAAQG,MAAMA,EAAM+B,c","file":"static/js/main.91df662b.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\nexport default function PrintMovie({movie}) {\r\n    return(\r\n        <div className={\"card\"}>\r\n            <img className={\"cardImg\"} src={`https://image.tmdb.org/t/p/w185_and_h278_bestv2/${movie.poster_path}`} alt=\"\"/>\r\n            <h2>{movie.original_title}</h2>\r\n            <small>{movie.overview}</small>\r\n            <p>Release date: {movie.release_date}</p>\r\n            <p>Vote: {movie.vote_average}</p>\r\n        </div>\r\n    )\r\n}","import React, { useState }from \"react\";\r\nimport PrintMovie from \"./PrintMovie\";\r\n\r\n\r\nexport default function SearchMovies(props){\r\n    const [input,setInput] = useState(\"\");\r\n    const [movies, setMovies] = useState([]);\r\n\r\n    const  searchMovies = async(e) => {\r\n        e.preventDefault();\r\n        const url = `https://api.themoviedb.org/3/search/movie?api_key=31769453dd0f9634806aedb81440ed94&language=en-US&query=${input}&page=1&include_adult=false`;\r\n\r\n        try {\r\n            const res = await fetch(url);\r\n            const data = await res.json();            // console.log(data);\r\n            console.log(data.results);\r\n            setMovies(data.results);\r\n        } catch (err) {\r\n            console.error(err)\r\n        }\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <form className=\"form\" onSubmit={searchMovies}>\r\n                <label className=\"label\" htmlFor=\"query\">Movies Name</label>\r\n                <input className=\"input\"  name=\"query\" value={input} onChange={(e)=>setInput(e.target.value)}\r\n                       type=\"text\" placeholder=\"Movies name\" />\r\n                <button className=\"button\" type=\"submit\">Search movies</button>\r\n            </form>\r\n            <div className=\"card-list\">\r\n                {movies.map(movie => (\r\n                    <PrintMovie movie = {movie} key={movie.id}/>\r\n                ))}\r\n            </div>\r\n        </>\r\n    )\r\n}","import React from \"react\";\r\nimport \"./style.css\";\r\nimport SearchMovies from \"./SearchMovie\";\r\n//https://api.themoviedb.org/3/movie/550?api_key=31769453dd0f9634806aedb81440ed94\r\nexport default function MovieProject(props) {\r\n    return(\r\n        <div className={\"container\"}>\r\n            <h1 className={\"title\"}>Movie Project</h1>\r\n            <SearchMovies/>\r\n        </div>\r\n    )\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport MovieProject from \"./MovieProject/MovieProject\";\n\nfunction App() {\n  return (\n    <div>\n      <header>\n        <MovieProject />\n\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}